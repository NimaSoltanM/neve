/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestUploadRouteImport } from './routes/test-upload'
import { Route as rootRouteRouteImport } from './routes/(root)/route'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as rootIndexRouteImport } from './routes/(root)/index'
import { Route as rootmarketplaceRouteRouteImport } from './routes/(root)/(marketplace)/route'
import { Route as rootmarketplaceShopRouteRouteImport } from './routes/(root)/(marketplace)/shop/route'
import { Route as rootmarketplaceDashboardRouteRouteImport } from './routes/(root)/(marketplace)/dashboard/route'
import { Route as rootmarketplaceShopIndexRouteImport } from './routes/(root)/(marketplace)/shop/index'
import { Route as rootmarketplaceMarketplaceIndexRouteImport } from './routes/(root)/(marketplace)/marketplace/index'
import { Route as rootmarketplaceCategoriesIndexRouteImport } from './routes/(root)/(marketplace)/categories/index'
import { Route as rootmarketplaceShopsSlugRouteImport } from './routes/(root)/(marketplace)/shops/$slug'
import { Route as rootmarketplaceCategoriesSlugRouteImport } from './routes/(root)/(marketplace)/categories/$slug'
import { Route as rootmarketplaceProductsNewIndexRouteImport } from './routes/(root)/(marketplace)/products/new/index'
import { Route as rootmarketplaceProductsProductSlugIndexRouteImport } from './routes/(root)/(marketplace)/products/$productSlug/index'

const TestUploadRoute = TestUploadRouteImport.update({
  id: '/test-upload',
  path: '/test-upload',
  getParentRoute: () => rootRouteImport,
} as any)
const rootRouteRoute = rootRouteRouteImport.update({
  id: '/(root)',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const rootIndexRoute = rootIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteRoute,
} as any)
const rootmarketplaceRouteRoute = rootmarketplaceRouteRouteImport.update({
  id: '/(marketplace)',
  getParentRoute: () => rootRouteRoute,
} as any)
const rootmarketplaceShopRouteRoute =
  rootmarketplaceShopRouteRouteImport.update({
    id: '/shop',
    path: '/shop',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)
const rootmarketplaceDashboardRouteRoute =
  rootmarketplaceDashboardRouteRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)
const rootmarketplaceShopIndexRoute =
  rootmarketplaceShopIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => rootmarketplaceShopRouteRoute,
  } as any)
const rootmarketplaceMarketplaceIndexRoute =
  rootmarketplaceMarketplaceIndexRouteImport.update({
    id: '/marketplace/',
    path: '/marketplace/',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)
const rootmarketplaceCategoriesIndexRoute =
  rootmarketplaceCategoriesIndexRouteImport.update({
    id: '/categories/',
    path: '/categories/',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)
const rootmarketplaceShopsSlugRoute =
  rootmarketplaceShopsSlugRouteImport.update({
    id: '/shops/$slug',
    path: '/shops/$slug',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)
const rootmarketplaceCategoriesSlugRoute =
  rootmarketplaceCategoriesSlugRouteImport.update({
    id: '/categories/$slug',
    path: '/categories/$slug',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)
const rootmarketplaceProductsNewIndexRoute =
  rootmarketplaceProductsNewIndexRouteImport.update({
    id: '/products/new/',
    path: '/products/new/',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)
const rootmarketplaceProductsProductSlugIndexRoute =
  rootmarketplaceProductsProductSlugIndexRouteImport.update({
    id: '/products/$productSlug/',
    path: '/products/$productSlug/',
    getParentRoute: () => rootmarketplaceRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof rootIndexRoute
  '/test-upload': typeof TestUploadRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof rootmarketplaceDashboardRouteRoute
  '/shop': typeof rootmarketplaceShopRouteRouteWithChildren
  '/categories/$slug': typeof rootmarketplaceCategoriesSlugRoute
  '/shops/$slug': typeof rootmarketplaceShopsSlugRoute
  '/categories': typeof rootmarketplaceCategoriesIndexRoute
  '/marketplace': typeof rootmarketplaceMarketplaceIndexRoute
  '/shop/': typeof rootmarketplaceShopIndexRoute
  '/products/$productSlug': typeof rootmarketplaceProductsProductSlugIndexRoute
  '/products/new': typeof rootmarketplaceProductsNewIndexRoute
}
export interface FileRoutesByTo {
  '/test-upload': typeof TestUploadRoute
  '/': typeof rootIndexRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof rootmarketplaceDashboardRouteRoute
  '/categories/$slug': typeof rootmarketplaceCategoriesSlugRoute
  '/shops/$slug': typeof rootmarketplaceShopsSlugRoute
  '/categories': typeof rootmarketplaceCategoriesIndexRoute
  '/marketplace': typeof rootmarketplaceMarketplaceIndexRoute
  '/shop': typeof rootmarketplaceShopIndexRoute
  '/products/$productSlug': typeof rootmarketplaceProductsProductSlugIndexRoute
  '/products/new': typeof rootmarketplaceProductsNewIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(root)': typeof rootRouteRouteWithChildren
  '/test-upload': typeof TestUploadRoute
  '/(root)/(marketplace)': typeof rootmarketplaceRouteRouteWithChildren
  '/(root)/': typeof rootIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/(root)/(marketplace)/dashboard': typeof rootmarketplaceDashboardRouteRoute
  '/(root)/(marketplace)/shop': typeof rootmarketplaceShopRouteRouteWithChildren
  '/(root)/(marketplace)/categories/$slug': typeof rootmarketplaceCategoriesSlugRoute
  '/(root)/(marketplace)/shops/$slug': typeof rootmarketplaceShopsSlugRoute
  '/(root)/(marketplace)/categories/': typeof rootmarketplaceCategoriesIndexRoute
  '/(root)/(marketplace)/marketplace/': typeof rootmarketplaceMarketplaceIndexRoute
  '/(root)/(marketplace)/shop/': typeof rootmarketplaceShopIndexRoute
  '/(root)/(marketplace)/products/$productSlug/': typeof rootmarketplaceProductsProductSlugIndexRoute
  '/(root)/(marketplace)/products/new/': typeof rootmarketplaceProductsNewIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/test-upload'
    | '/auth'
    | '/dashboard'
    | '/shop'
    | '/categories/$slug'
    | '/shops/$slug'
    | '/categories'
    | '/marketplace'
    | '/shop/'
    | '/products/$productSlug'
    | '/products/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/test-upload'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/categories/$slug'
    | '/shops/$slug'
    | '/categories'
    | '/marketplace'
    | '/shop'
    | '/products/$productSlug'
    | '/products/new'
  id:
    | '__root__'
    | '/(root)'
    | '/test-upload'
    | '/(root)/(marketplace)'
    | '/(root)/'
    | '/auth/'
    | '/(root)/(marketplace)/dashboard'
    | '/(root)/(marketplace)/shop'
    | '/(root)/(marketplace)/categories/$slug'
    | '/(root)/(marketplace)/shops/$slug'
    | '/(root)/(marketplace)/categories/'
    | '/(root)/(marketplace)/marketplace/'
    | '/(root)/(marketplace)/shop/'
    | '/(root)/(marketplace)/products/$productSlug/'
    | '/(root)/(marketplace)/products/new/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  rootRouteRoute: typeof rootRouteRouteWithChildren
  TestUploadRoute: typeof TestUploadRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test-upload': {
      id: '/test-upload'
      path: '/test-upload'
      fullPath: '/test-upload'
      preLoaderRoute: typeof TestUploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)': {
      id: '/(root)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)/': {
      id: '/(root)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootIndexRouteImport
      parentRoute: typeof rootRouteRoute
    }
    '/(root)/(marketplace)': {
      id: '/(root)/(marketplace)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootmarketplaceRouteRouteImport
      parentRoute: typeof rootRouteRoute
    }
    '/(root)/(marketplace)/shop': {
      id: '/(root)/(marketplace)/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof rootmarketplaceShopRouteRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
    '/(root)/(marketplace)/dashboard': {
      id: '/(root)/(marketplace)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof rootmarketplaceDashboardRouteRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
    '/(root)/(marketplace)/shop/': {
      id: '/(root)/(marketplace)/shop/'
      path: '/'
      fullPath: '/shop/'
      preLoaderRoute: typeof rootmarketplaceShopIndexRouteImport
      parentRoute: typeof rootmarketplaceShopRouteRoute
    }
    '/(root)/(marketplace)/marketplace/': {
      id: '/(root)/(marketplace)/marketplace/'
      path: '/marketplace'
      fullPath: '/marketplace'
      preLoaderRoute: typeof rootmarketplaceMarketplaceIndexRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
    '/(root)/(marketplace)/categories/': {
      id: '/(root)/(marketplace)/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof rootmarketplaceCategoriesIndexRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
    '/(root)/(marketplace)/shops/$slug': {
      id: '/(root)/(marketplace)/shops/$slug'
      path: '/shops/$slug'
      fullPath: '/shops/$slug'
      preLoaderRoute: typeof rootmarketplaceShopsSlugRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
    '/(root)/(marketplace)/categories/$slug': {
      id: '/(root)/(marketplace)/categories/$slug'
      path: '/categories/$slug'
      fullPath: '/categories/$slug'
      preLoaderRoute: typeof rootmarketplaceCategoriesSlugRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
    '/(root)/(marketplace)/products/new/': {
      id: '/(root)/(marketplace)/products/new/'
      path: '/products/new'
      fullPath: '/products/new'
      preLoaderRoute: typeof rootmarketplaceProductsNewIndexRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
    '/(root)/(marketplace)/products/$productSlug/': {
      id: '/(root)/(marketplace)/products/$productSlug/'
      path: '/products/$productSlug'
      fullPath: '/products/$productSlug'
      preLoaderRoute: typeof rootmarketplaceProductsProductSlugIndexRouteImport
      parentRoute: typeof rootmarketplaceRouteRoute
    }
  }
}

interface rootmarketplaceShopRouteRouteChildren {
  rootmarketplaceShopIndexRoute: typeof rootmarketplaceShopIndexRoute
}

const rootmarketplaceShopRouteRouteChildren: rootmarketplaceShopRouteRouteChildren =
  {
    rootmarketplaceShopIndexRoute: rootmarketplaceShopIndexRoute,
  }

const rootmarketplaceShopRouteRouteWithChildren =
  rootmarketplaceShopRouteRoute._addFileChildren(
    rootmarketplaceShopRouteRouteChildren,
  )

interface rootmarketplaceRouteRouteChildren {
  rootmarketplaceDashboardRouteRoute: typeof rootmarketplaceDashboardRouteRoute
  rootmarketplaceShopRouteRoute: typeof rootmarketplaceShopRouteRouteWithChildren
  rootmarketplaceCategoriesSlugRoute: typeof rootmarketplaceCategoriesSlugRoute
  rootmarketplaceShopsSlugRoute: typeof rootmarketplaceShopsSlugRoute
  rootmarketplaceCategoriesIndexRoute: typeof rootmarketplaceCategoriesIndexRoute
  rootmarketplaceMarketplaceIndexRoute: typeof rootmarketplaceMarketplaceIndexRoute
  rootmarketplaceProductsProductSlugIndexRoute: typeof rootmarketplaceProductsProductSlugIndexRoute
  rootmarketplaceProductsNewIndexRoute: typeof rootmarketplaceProductsNewIndexRoute
}

const rootmarketplaceRouteRouteChildren: rootmarketplaceRouteRouteChildren = {
  rootmarketplaceDashboardRouteRoute: rootmarketplaceDashboardRouteRoute,
  rootmarketplaceShopRouteRoute: rootmarketplaceShopRouteRouteWithChildren,
  rootmarketplaceCategoriesSlugRoute: rootmarketplaceCategoriesSlugRoute,
  rootmarketplaceShopsSlugRoute: rootmarketplaceShopsSlugRoute,
  rootmarketplaceCategoriesIndexRoute: rootmarketplaceCategoriesIndexRoute,
  rootmarketplaceMarketplaceIndexRoute: rootmarketplaceMarketplaceIndexRoute,
  rootmarketplaceProductsProductSlugIndexRoute:
    rootmarketplaceProductsProductSlugIndexRoute,
  rootmarketplaceProductsNewIndexRoute: rootmarketplaceProductsNewIndexRoute,
}

const rootmarketplaceRouteRouteWithChildren =
  rootmarketplaceRouteRoute._addFileChildren(rootmarketplaceRouteRouteChildren)

interface rootRouteRouteChildren {
  rootmarketplaceRouteRoute: typeof rootmarketplaceRouteRouteWithChildren
  rootIndexRoute: typeof rootIndexRoute
}

const rootRouteRouteChildren: rootRouteRouteChildren = {
  rootmarketplaceRouteRoute: rootmarketplaceRouteRouteWithChildren,
  rootIndexRoute: rootIndexRoute,
}

const rootRouteRouteWithChildren = rootRouteRoute._addFileChildren(
  rootRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  rootRouteRoute: rootRouteRouteWithChildren,
  TestUploadRoute: TestUploadRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
